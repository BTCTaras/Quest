	X = 1
	Y = 1
	Width = 0
	Height = 0
	BackgroundColour = colours.white
	Page = {}
	Parent = nil

	Draw = function(self)
		RegisteredWebElements = {}
		
		Drawing.DrawBlankArea(pos.X, pos.Y, self.Width, self.Height, self.BackgroundColour)

		RegisterClick(self)
	end

	CalculatePositions = function(self)

	end

	InsertElement = function(self, element)
		if element == '\n' then
			return
		end
		if type(element) == 'string' then
			print(#element)--._tag)
		end
		if element._tag then
			print(element._tag)
		end
		if type(element) == 'table' then
			for i, elem in ipairs(element) do
				self:InsertElement(elem)
			end
		end
	end

	BuildPage = function(self)
		print(textutils.serialize(self.Page))
		for i, elem in ipairs(self.Page) do
			self:InsertElement(elem)
		end
	end

	Initialise = function(self, x, y, width, height, page, parent)
		local new = {}    -- the new instance
		setmetatable( new, {__index = self} )
		height = height or 1
		width = width
		new.Width = width
		new.Height = height
		new.Y = y
		new.X = x
		new.BackgroundColour = backgroundColour or self.BackgroundColour
		new.Page = page
		new.Parent = parent
		return new
	end

	Register = function(self)
		RegisterElement(self)
		return self
	end

	local RegisteredWebElements = {}

	local RegisterWebElement = function(self, object, x, y)

	end

	Click = function(self, side, x, y)
		if self._Click then
			if self:_Click(side, x, y, not self.Toggle) ~= false and self.Toggle ~= nil then
				self.Toggle = not self.Toggle
			end
			return true
		else
			return false
		end
	end